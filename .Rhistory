xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Oranges") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Accent") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Spectral") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE)
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="black", fill="#69b3a2", se=TRUE)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="black", fill="#69b3a2", se=TRUE)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_rug(col="steelblue",alpha=0.1, size=1.5) +
geom_smooth(method=lm , color="black", fill="#69b3a2", se=TRUE)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="black", fill="#69b3a2", se=TRUE)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="black", fill="#69b3a2", se=TRUE, method=loess())  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=lm , color="black", fill="#69b3a2", se=TRUE, method=loess)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
geom_smooth(method=glm, color="black", fill="#69b3a2", se=TRUE,)  +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_log10(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#Need to include the Death Data
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths (log10)") +
scale_x_continuous(limits = c(),
breaks = c(0, 1, 10, 30, 100, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths") +
scale_x_continuous(limits = c(),
breaks = c(0, 1, 10, 50, 100, 150, 200, 250, 300) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths") +
scale_x_continuous(limits = c(),
breaks = c(0, 1, 10, 50, 100, 150, 200, 250, 300)) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths") +
scale_x_continuous(limits = c(),
breaks = c(0, 10, 50, 100, 150, 200, 250, 300),
minor_breaks = waiver()) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
#The final, cleaned and organised first dataset is piped through the ggplot function, with appropriate x and y axis parameters set to display correlations
clean_full_ui %>%
ggplot(aes(x=injury_type, y=number_of_admissions,  fill=age_group)) +
geom_bar(position = "dodge",
stat = "identity",
width = 0.8) +
scale_fill_brewer(palette = "Pastel1") +
theme_dark() +
gtitle("Number of Admissions by Injury Type") +
xlab("Injury Type") +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol =10) +
coord_flip() +
guides(fill=guide_legend(title = "Age Group"))
#The final, cleaned and organised first dataset is piped through the ggplot function, with appropriate x and y axis parameters set to display correlations
clean_full_ui %>%
ggplot(aes(x=injury_type, y=number_of_admissions,  fill=age_group)) +
geom_bar(position = "dodge",
stat = "identity",
width = 0.8) +
scale_fill_brewer(palette = "Pastel1") +
theme_dark() +
ggtitle("Number of Admissions by Injury Type") +
xlab("Injury Type") +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol =10) +
coord_flip() +
guides(fill=guide_legend(title = "Age Group"))
library(tidyverse)
library(lubridate)
library(magrittr)
library(dplyr)
library(ggplot2)
library(janitor)
library(kableExtra)
library(scales)
library(viridis)
#Calling necessary packages for RMarkdown.
#getwd() if necessary
#setwd() if necessary
orig_hb = read.csv('hb_lookup.csv')
orig_uiadmissions = read.csv('ui_admissions_2022.csv')
orig_uideaths = read.csv('ui_deaths_2022.csv')
#CSV files read into RMarkdown and assigned to object names for ease of use.
glimpse(orig_hb)
#Rows: 18 Columns: 5, HB numbers + name(location in Scotland). Couple of "NA"s in column 4, consistent result in 3
glimpse(orig_uiadmissions)
#Rows: 391,104 Columns: 14, Breakdown of HB, Year, Age, Sex, Injurylocation, Injurytype, Number of Admissions | Data is raw and aggregated. Columns with repeated results (c(3,5,7,9,11,13)), all stating "QF". Summarised values in columns (c(6,8,10,12)), stating "All".
glimpse(orig_uideaths)
#Rows: 182,502 Columns: 14, Breakdown of HB, Year, Age, Sex, Injurylocation, Injurytype, Number of Deaths | Data is raw and aggregated
summary(orig_hb)
#HB and HBName will be required for joining datasets after cleaning.
summary(orig_uiadmissions)
#NumberOFAdmissions Max. 61279
#Column 1, Financial Year is a character string column not a integer: requires mutation.
#"HBR" column same as orig_hb co dataset column "HB"
summary(orig_uideaths)
#NumberofDeaths Max. 2759
#Initial observations of datasets show a few discrepancies
clean_full_ui_filtered %>%
ggplot(aes(x=numberof_deaths, y=number_of_admissions, color=age_group)) +
geom_point(alpha = 1, size = 1.7) +
scale_color_brewer(palette = "Paired") +
theme_dark() +
ggtitle("Rate of Deaths in Falling Injury Admissions") +
xlab("Number of Deaths") +
scale_x_continuous(limits = c(),
breaks = c(0, 10, 50, 100, 150, 200, 250, 300),
minor_breaks = waiver()) +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol = 0) +
coord_flip() +
guides(color=guide_legend(title = "Age Group"))
library(tidyverse)
library(lubridate)
library(magrittr)
library(dplyr)
library(ggplot2)
library(janitor)
library(kableExtra)
library(scales)
library(viridis)
#Calling necessary packages for RMarkdown.
#getwd() if necessary
#setwd() if necessary
orig_hb = read.csv('hb_lookup.csv')
orig_uiadmissions = read.csv('ui_admissions_2022.csv')
orig_uideaths = read.csv('ui_deaths_2022.csv')
#CSV files read into RMarkdown and assigned to object names for ease of use.
glimpse(orig_hb)
#Rows: 18 Columns: 5, HB numbers + name(location in Scotland). Couple of "NA"s in column 4, consistent result in 3
glimpse(orig_uiadmissions)
#Rows: 391,104 Columns: 14, Breakdown of HB, Year, Age, Sex, Injurylocation, Injurytype, Number of Admissions | Data is raw and aggregated. Columns with repeated results (c(3,5,7,9,11,13)), all stating "QF". Summarised values in columns (c(6,8,10,12)), stating "All".
glimpse(orig_uideaths)
#Rows: 182,502 Columns: 14, Breakdown of HB, Year, Age, Sex, Injurylocation, Injurytype, Number of Deaths | Data is raw and aggregated
summary(orig_hb)
#HB and HBName will be required for joining datasets after cleaning.
summary(orig_uiadmissions)
#NumberOFAdmissions Max. 61279
#Column 1, Financial Year is a character string column not a integer: requires mutation.
#"HBR" column same as orig_hb co dataset column "HB"
summary(orig_uideaths)
#NumberofDeaths Max. 2759
#Initial observations of datasets show a few discrepancies
cleaned_admission <- orig_uiadmissions %>%
select( FinancialYear,
HBR,
CA,
AgeGroup,
Sex,
InjuryType,
InjuryLocation,
NumberOfAdmissions) %>%
clean_names()  %>%
separate(financial_year, into = c("year"), sep = "/") %>%
filter(injury_type != "All Diagnoses") %>%
filter(injury_location != "All") %>%
filter(age_group != "All") %>%
filter(sex != "All") %>%
mutate_at(c(1), as.numeric)
#orig_uiadmissions file assigned to new object after cleaning
#select() function used to organise and select relevant columns from dataset: info, demographic, Injury Info, No. Admissions
#clean_names() function used to make snake case, lower case names for uniformity
#separate() function to separate 2011/2012 and other values present in FinancialYear column into individual values
#filter() function used to omit (!=) information or highlight (==)
#mutate_at(c(1), as.numeric) to change character values to numeric ones as column represent "Financial Year"
cleaned_deaths <- orig_uideaths %>%
select( Year,
HBR,
CA,
AgeGroup,
Sex,
InjuryType,
InjuryLocation,
NumberofDeaths) %>%
clean_names() %>%
filter(injury_type != "All") %>%
filter(injury_location != "All") %>%
filter(age_group != "All") %>%
filter(sex != "All")
#Process from orig_uiadmissions repeated
cleaned_hb <- orig_hb %>%
select( HB,
HBName,
Country) %>%
clean_names()
#Process from orig_uiadmissions repeated
full_ui <- cleaned_admission %>%
full_join(cleaned_deaths)
#full_join() used to merge cleaned datasets together. full_join() keeps values from both, easier to observe inconsistencies.
full_ui_hb <- full_ui %>%
full_join(cleaned_hb, by = c("hbr" = "hb"))
#full_join() of final dataset. All datasets are now merged.
# glimpse(full_ui_hb)
# is.na(full_ui_hb)
clean_full_ui <- full_ui_hb %>%
select(year,
hbr,
hb_name,
age_group,
sex,
injury_type,
injury_location,
number_of_admissions,
numberof_deaths)  %>%
mutate(numberof_deaths = coalesce(numberof_deaths, 0)) %>%
mutate(across(c(injury_location), na_if, "Not Applicable")) %>%
mutate(across(c(number_of_admissions), na_if, 0)) %>%
na.omit(clean_full_ui) %>%
group_by(sex, age_group, injury_type, injury_location, year, hbr, hb_name) %>%
summarise(across(c(number_of_admissions, numberof_deaths), sum)) %>%
arrange(age_group) %>%
distinct() %>%
rowid_to_column()
#Tidying and wrangling process to make data set ready for plotting.
#Final modifications and wrangling of data.
#Selected relevant columns for data plotting.
#Mutate() and Coalesce() to change NA values in numberof_deaths column to numerical value 0.
#Mutate(), across() to na_if functions to change character value "Not Applicable" to null value in column 7.
#na.omit() to omit null, incomplete data present in merged data.
#rowid_to_column() to number each line of the dataset for navigation and ease of use by adding integer column.
#group_by() to organise the columns into a desired order
#This dataset is cleaned and ready to be observed for any last discrepancies before being plotted.
clean_full_ui$age_group <- factor(clean_full_ui$age_group, levels=c("0-4 years", "5-9 years", "10-14 years", "15-24 years", "25-44 years", "45-64 years", "65-74 years", "75plus years"))
clean_full_ui_filtered <- clean_full_ui %>%
filter(injury_type == "Falls")
#Final reorganizing of data as some discrepancies were observed in previous observations, including incorrect ordering of age groups, this has been fixed by manually assign the order of the age groups by the factor() function.
#The final filtered data set is made after the penultimate data observations in the first graph have shown that "Falls" have the highest rate of admission. This filtered data set will be used to determine the rate of death in the final plot of this report.
#The final, cleaned and organised first dataset is piped through the ggplot function, with appropriate x and y axis parameters set to display correlations
clean_full_ui %>%
ggplot(aes(x=injury_type, y=number_of_admissions,  fill=age_group)) +
geom_bar(position = "dodge",
stat = "identity",
width = 0.8) +
scale_fill_brewer(palette = "Pastel1") +
theme_dark() +
ggtitle("Number of Admissions by Injury Type") +
xlab("Injury Type") +
scale_y_log10(name = "Number Of Admissions (log10)",
limits = c(),
breaks = c(1, 10, 30, 100, 300, 1000, 10000)) +
facet_wrap(~sex, ncol =10) +
coord_flip() +
guides(fill=guide_legend(title = "Age Group"))
